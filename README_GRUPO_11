
## ¬øPor qu√© el grupo escogi√≥ este repositorio?

#¬øC√∫al es la utilidad que tiene Zap?
Su utilidad se encuentra en la automatizaci√≥n de la detecci√≥n de vulnerabilidades emergentes como inyecci√≥n SQL, XSS y configuraciones inseguras, mientras se desarrollan o testean las aplicaciones. 
Adem√°s, ofrece funciones robustas para an√°lisis manual gracias a su proxy interceptador, proporcionando flexibilidad y profundidad en el testeo de seguridad.
Su modelo colaborativo como parte de la comunidad OWASP y su presencia en GitHub como un proyecto activo y accesible para contribuciones permiten mantener una evoluci√≥n continua del c√≥digo. Esto lo convierte en una herramienta t√©cnica eficaz, tanto en entornos educativos como en equipos profesionales de seguridad que buscan una soluci√≥n flexible, extendible y con respaldo comunitario.
(https://github.com/zaproxy/zaproxy/blob/main/README.md)

# ¬øPor qu√© el grupo escogi√≥ este repositorio?

El grupo seleccion√≥ el repositorio Zaproxy (Zed Attack Proxy) porque constituye una herramienta madura y reconocida en el √°mbito de la ciberseguridad, especialmente en pruebas de aplicaciones web. ZAP se distingue por su capacidad de realizar escaneos activos y pasivos, lo que permite identificar vulnerabilidades cr√≠ticas como inyecci√≥n SQL, cross-site scripting (XSS) y fallos de control de acceso. 

Estas capacidades se alinean directamente con los riesgos descritos en el OWASP Top 10, uno de los est√°ndares m√°s relevantes para la industria del software seguro (OWASP, 2021). Su uso en m√∫ltiples proyectos de seguridad y su continua evoluci√≥n respaldan su elecci√≥n como objeto de estudio.

Asimismo, el proyecto se ajusta a tendencias modernas en DevSecOps al ofrecer integraci√≥n mediante API REST, compatibilidad con Docker y automatizaci√≥n en pipelines CI/CD. Estos atributos lo convierten en una herramienta flexible, capaz de incorporarse de forma √°gil en entornos de desarrollo que requieren seguridad continua. La incorporaci√≥n de pruebas de seguridad din√°micas (DAST) en fases tempranas del ciclo de vida del software es esencial para reducir costes y riesgos, lo que refuerza la pertinencia de ZAP como repositorio de referencia para el trabajo.

Finalmente, la selecci√≥n de este repositorio se justifica tambi√©n en la validaci√≥n acad√©mica e industrial que ha recibido. Investigaciones recientes como Benchmarking OWASP ZAP v2.12.0 vs v2.13.0 (Dumont et al., 2022) demuestran mejoras en la capacidad de detecci√≥n de vulnerabilidades, mientras que estudios como XSS for the Masses (Dumont et al., 2022) evidencian su utilidad en entornos educativos al reducir fallos de seguridad en proyectos estudiantiles.

Dumont, T., Fong, E., & Seitz, J. (2022). XSS for the Masses: Integrating Web Security into Programming Courses. arXiv.(https://arxiv.org/abs/2204.12416)

Li, X., Wang, J., & Patel, R. (2025). Benchmarking OWASP ZAP v2.12.0 vs v2.13.0. arXiv. (https://arxiv.org/abs/2501.05907)

OWASP. (2021). OWASP Top 10: The Ten Most Critical Web Application Security Risks. OWASP Foundation. (https://owasp.org/Top10)

### Proyecto OWASP ZAP ‚Äì Dev Build

Este proyecto documenta el proceso de levantamiento, configuraci√≥n y ejecuci√≥n de OWASP ZAP desde el c√≥digo fuente utilizando Gradle, incluyendo la instalaci√≥n de complementos y la ejecuci√≥n de un escaneo automatizado sobre una aplicaci√≥n web de prueba.

## üìå Objetivo

Compilar OWASP ZAP desde el c√≥digo fuente con Gradle.
Instalar complementos necesarios para la ejecuci√≥n.
Ejecutar un escaneo automatizado de un sitio de prueba.
Documentar el proceso y resultados obtenidos.

## üõ†Ô∏è Preparaci√≥n del Entorno

Instalar JDK 11 o 17 (Eclipse Adoptium recomendado).
Configurar la variable de entorno JAVA_HOME:
```
C:\Program Files\Eclipse Adoptium\jdk-11.0.28.6-hotspot\bin
```

## üîπ Paso 2 ‚Äì Compilaci√≥n con Gradle

En la ra√≠z del proyecto se ejecut√≥:
```
.\gradlew :zap:run -x test
```

Inicialmente, el build fallaba por falta del add-on callhome.
Se solucion√≥ instalando los complementos requeridos desde el Marketplace de ZAP.

## üîπ Paso 3 ‚Äì Instalaci√≥n de Complementos

Desde el men√∫ Herramientas ‚Üí Administrar Complementos, se instalaron los m√≥dulos esenciales:
```
callhome
spider
ajax spider
report generation
```
Otros m√≥dulos recomendados.
Con esto el proyecto pudo iniciarse correctamente.

### Ejecuci√≥n del Escaneo Automatizado

Ir a la pesta√±a Inicio R√°pido.

Ingresar la URL a atacar:

http://pescalimentos.com


## Configurar:

Spider tradicional: ‚úÖ

Spider AJAX: S√≠ es Moderno con navegador Edge.

Presionar Atacar.

üì∏ Captura 2 ‚Äì Configuraci√≥n de escaneo automatizado


## üîç Progreso del Escaneo

El spider recorri√≥ el sitio y detect√≥:

612 URLs encontradas

473 nodos ingresados

Se procesaron m√∫ltiples recursos externos (GitHub, YouTube, CDNs, etc.).

üì∏ Captura 3 ‚Äì Escaneo en progreso


### üìä Resultados

Se generaron m√∫ltiples peticiones HTTP registradas.

Sitio procesado con spider tradicional + AJAX.

Alertas y posibles vulnerabilidades listadas en panel de resultados.

üì∏ Captura 4 ‚Äì Resultados del escaneo y tr√°fico HTTP


### üì§ Exportar Informe

Ir a Informe ‚Üí Generar Informe.

Seleccionar formato deseado (HTML recomendado).

Guardar archivo para documentaci√≥n.

### ‚úÖ Conclusi√≥n

OWASP ZAP fue levantado exitosamente desde c√≥digo fuente con Gradle.
Se resolvieron dependencias faltantes instalando complementos.
Se ejecut√≥ un escaneo automatizado contra un sitio de prueba.
Se documentaron los resultados con capturas e instrucciones claras.